name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Override tag to release when dispatching manually'
        required: false

jobs:
  release_on_thunderstore:
    if: |
      github.ref != 'refs/heads/codex' &&
      github.head_ref != 'codex' &&
      github.base_ref != 'codex'
    runs-on: ubuntu-latest
    steps:
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '6.0.x'
          dotnet-quality: 'preview'

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Resolve Release Tag
        id: resolve_tag
        shell: bash
        env:
          MANUAL_RELEASE_TAG: ${{ github.event.inputs.release_tag }}
          DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
        run: |
          set -euo pipefail

          if [[ "${GITHUB_EVENT_NAME}" == "push" && "${GITHUB_REF_TYPE}" == "tag" ]]; then
            release_tag="${GITHUB_REF_NAME}"
          else
            release_tag="${MANUAL_RELEASE_TAG:-}"
            if [[ -z "${release_tag}" ]]; then
              release_tag=$(git describe --tags "$(git rev-list --tags --max-count=1)")
            fi
          fi

          if [[ -z "${release_tag}" ]]; then
            echo "Failed to resolve a release tag" >&2
            exit 1
          fi

          default_branch="${DEFAULT_BRANCH:-main}"

          if ! git fetch origin "${default_branch}" >/dev/null 2>&1; then
            echo "Unable to fetch '${default_branch}' from origin to validate the release tag." >&2
            exit 1
          fi

          release_commit=$(git rev-list -n 1 "${release_tag}")

          if ! git merge-base --is-ancestor "${release_commit}" "origin/${default_branch}"; then
            echo "Resolved release tag '${release_tag}' (commit ${release_commit}) is not reachable from '${default_branch}'. Aborting release to avoid publishing from codex branch commits." >&2
            exit 1
          fi

          echo "release_tag=${release_tag}" >> "$GITHUB_OUTPUT"
          echo "RELEASE_TAG=${release_tag}" >> "$GITHUB_ENV"

      - name: Download Release
        run: |
          gh release download ${{ steps.resolve_tag.outputs.release_tag }} -D ./dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Thunderstore CLI (tcli)
        run: dotnet tool install --global tcli

      - name: Publish build to Thunderstore
        run: |
          trimmed_tag=${RELEASE_TAG:1}
          tcli publish --token ${{ secrets.THUNDERSTORE_KEY }} --package-version $trimmed_tag
        env:
          RELEASE_TAG: ${{ steps.resolve_tag.outputs.release_tag }}
